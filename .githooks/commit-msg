#!/usr/bin/env python


import sys


def is_wip(commit: str) -> bool:
    """Return true if the commit message is Wok In Progress."""
    lowered_commit = commit.lower()
    if lowered_commit == "wip":
        return True
    if lowered_commit == "wip\n":
        return True
    if lowered_commit == "work in progress":
        return True
    if lowered_commit == "work in progress\n":
        return True
    return False


def validate_commit(current_commit: str) -> tuple:  # Tuple[bool, str]
    """Return a tuple with the validation result and error.

    :param current_commit: first line of the current commit
    :type current_commit: str
    :return: validation result and validation failure description (if any)
    :rtype: Tuple[bool, str]
    """
    if type(current_commit) == 'str':
        current_commit = current_commit.plit('\n')[0]

    if current_commit in (None, ""):
        return (False, 'no empty commit')

    if current_commit[0] == " " or current_commit[-1] == " ":
        return (False, 'no trailing spaces')

    if is_wip(current_commit):
        return (True, None)

    # -------------------------------------------------------------------------
    # Commit structure should be:
    # {keyword}{delimiter}{single space}{commit message}
    #
    # Example:
    # feat: this is my message

    # Enforce specific delimiter
    delimiter = ':'
    delimeter_index = current_commit.find(delimiter)
    if delimeter_index == -1:
        return (False, f"inconsistent structure: delimiter '{delimiter}' missing")
    # Enforce specific keywords
    keyword = current_commit[0:delimeter_index]
    accepted_keywords = ('chore', 'docs', 'feat', 'fix', 'quality', 'refactor', 'test')
    if keyword not in accepted_keywords:
        accepted_keywords_formatted = "', '".join(accepted_keywords[0:-1])
        accepted_keywords_formatted += f"' or '{accepted_keywords[-1]}"
        return (False, f"inconsistent structure: keyword '{keyword}' must be '{accepted_keywords_formatted}'")
    # Enforce single space after delimiter
    if current_commit[delimeter_index + 1] != ' ':
        return (False, f"inconsistent structure: must be a space after the '{delimiter}' delimiter")
    # Enforce commit message capitalization
    commit_first_letter = current_commit[delimeter_index + 2]
    if commit_first_letter == commit_first_letter.lower():
        return (False, 'inconsistent structure: first word after delimiter should be capitalized')

    return (True, None)


def main():
    """Validate commit message. Abort and report on validation failure."""
    print('Validating commit message...')

    current_message_file = sys.argv[1]
    with open(current_message_file, 'r') as file_handler:
        current_commit_message = file_handler.read()

    validation_result = validate_commit(current_commit_message)
    valid_commit_message = validation_result[0]
    invalid_commit_message_error = validation_result[1]

    if not valid_commit_message:
        print(f"Commit message validation failed:\n    {invalid_commit_message_error}\n\nCommit aborted")
        sys.exit(1)

    print('Commit message validation passed successfully!\n')
    sys.exit(0)


if __name__ == "__main__":
    main()
